// <auto-generated />
using System;
using Ecommerce.DAL.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Ecommerce.DAL.Migrations
{
    [DbContext(typeof(ecommerceContext))]
    partial class ecommerceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Ecommerce.Models.Entities.BodyStyles", b =>
                {
                    b.Property<int>("BodyStylesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("body_styles_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("BodyStyleName")
                        .IsRequired()
                        .HasColumnName("body_style_name")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("BodyStylesId");

                    b.HasIndex("BodyStyleName")
                        .HasName("idxbodystyle");

                    b.ToTable("body_styles");
                });

            modelBuilder.Entity("Ecommerce.Models.Entities.Categories", b =>
                {
                    b.Property<int>("CategoriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("categories_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnName("category_name")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("CategoriesId");

                    b.HasIndex("CategoryName")
                        .HasName("idxcategoryname");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("Ecommerce.Models.Entities.CategoryPictures", b =>
                {
                    b.Property<int>("CategoryPicturesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("category_pictures_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<int>("FkCategoriesId")
                        .HasColumnName("fk_categories_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("PictureName")
                        .IsRequired()
                        .HasColumnName("picture_name")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("PictureType")
                        .IsRequired()
                        .HasColumnName("picture_type")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnName("picture_url")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("CategoryPicturesId");

                    b.HasIndex("FkCategoriesId")
                        .HasName("category_pictures_categories_idx");

                    b.HasIndex("PictureName")
                        .HasName("idxpicturename");

                    b.ToTable("category_pictures");
                });

            modelBuilder.Entity("Ecommerce.Models.Entities.Colors", b =>
                {
                    b.Property<int>("ColorsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("colors_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasColumnName("color_name")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<int?>("FkMakesId")
                        .HasColumnName("fk_makes_id")
                        .HasColumnType("int(11)");

                    b.HasKey("ColorsId");

                    b.HasIndex("ColorName")
                        .HasName("idxcolorname");

                    b.HasIndex("FkMakesId")
                        .HasName("colors_makes_idx");

                    b.ToTable("colors");
                });

            modelBuilder.Entity("Ecommerce.Models.Entities.Customers", b =>
                {
                    b.Property<int>("CustomersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("customers_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("AccountNumber")
                        .HasColumnName("account_number")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("AlternateNumber")
                        .HasColumnName("alternate_number")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("BillToAddress")
                        .HasColumnName("bill_to_address")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("BillToCity")
                        .HasColumnName("bill_to_city")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("BillToState")
                        .HasColumnName("bill_to_state")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("BillToZipcode")
                        .HasColumnName("bill_to_zipcode")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("EmailAddress")
                        .HasColumnName("email_address")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnName("full_name")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("ShipToAddress")
                        .HasColumnName("ship_to_address")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("ShipToCity")
                        .HasColumnName("ship_to_city")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("ShipToState")
                        .HasColumnName("ship_to_state")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("ShipToZipcode")
                        .HasColumnName("ship_to_zipcode")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("CustomersId");

                    b.HasIndex("AccountNumber")
                        .HasName("idxaccountnumber");

                    b.HasIndex("AlternateNumber")
                        .HasName("idxalternate");

                    b.HasIndex("EmailAddress")
                        .HasName("idxemail");

                    b.HasIndex("FullName")
                        .HasName("idxfullname");

                    b.HasIndex("PhoneNumber")
                        .HasName("idxphonenumber");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("Ecommerce.Models.Entities.DriveTrains", b =>
                {
                    b.Property<int>("DriveTrainsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("drive_trains_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("DriveTrainName")
                        .IsRequired()
                        .HasColumnName("drive_train_name")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("DriveTrainsId");

                    b.HasIndex("DriveTrainName")
                        .HasName("idxdrivetrainname");

                    b.ToTable("drive_trains");
                });

            modelBuilder.Entity("Ecommerce.Models.Entities.EngineTypes", b =>
                {
                    b.Property<int>("EngineTypesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("engine_types_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("EngineTypeName")
                        .IsRequired()
                        .HasColumnName("engine_type_name")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("EngineTypesId");

                    b.HasIndex("EngineTypeName")
                        .HasName("idxenginetypename");

                    b.ToTable("engine_types");
                });

            modelBuilder.Entity("Ecommerce.Models.Entities.EpaClasses", b =>
                {
                    b.Property<int>("EpaClassesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("epa_classes_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("EpaClassName")
                        .IsRequired()
                        .HasColumnName("epa_class_name")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("EpaClassesId");

                    b.HasIndex("EpaClassName")
                        .HasName("idxepaclassname");

                    b.ToTable("epa_classes");
                });

            modelBuilder.Entity("Ecommerce.Models.Entities.InventoryItemPictures", b =>
                {
                    b.Property<int>("InventoryItemPicturesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("inventory_item_pictures_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("AlternateText")
                        .HasColumnName("alternate_text")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<int>("FkInventoryItemsId")
                        .HasColumnName("fk_inventory_items_id")
                        .HasColumnType("int(11)");

                    b.Property<int?>("PictureHeight")
                        .HasColumnName("picture_height")
                        .HasColumnType("int(11)");

                    b.Property<string>("PictureName")
                        .IsRequired()
                        .HasColumnName("picture_name")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnName("picture_url")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<int?>("PictureWidth")
                        .HasColumnName("picture_width")
                        .HasColumnType("int(11)");

                    b.HasKey("InventoryItemPicturesId");

                    b.HasIndex("FkInventoryItemsId")
                        .HasName("inventory_items_inv_itmpic_idx");

                    b.HasIndex("PictureName")
                        .HasName("idxpicturename");

                    b.ToTable("inventory_item_pictures");
                });

            modelBuilder.Entity("Ecommerce.Models.Entities.InventoryItems", b =>
                {
                    b.Property<int>("InventoryItemsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("inventory_items_id")
                        .HasColumnType("int(11)");

                    b.Property<decimal?>("Cost")
                        .HasColumnName("cost")
                        .HasColumnType("decimal(19,2)");

                    b.Property<int?>("FkColorsId")
                        .HasColumnName("fk_colors_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkProductsId")
                        .HasColumnName("fk_products_id")
                        .HasColumnType("int(11)");

                    b.Property<int?>("FkWarrantiesId")
                        .HasColumnName("fk_warranties_id")
                        .HasColumnType("int(11)");

                    b.Property<sbyte?>("IsNew")
                        .HasColumnName("is_new")
                        .HasColumnType("tinyint(4)");

                    b.Property<int?>("Mileage")
                        .HasColumnName("mileage")
                        .HasColumnType("int(11)");

                    b.Property<decimal?>("SalesPrice")
                        .HasColumnName("sales_price")
                        .HasColumnType("decimal(19,2)");

                    b.Property<string>("Vin")
                        .HasColumnName("vin")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("InventoryItemsId");

                    b.HasIndex("FkColorsId")
                        .HasName("colors_inventory_Items_idx");

                    b.HasIndex("FkProductsId")
                        .HasName("products_inventory_items_idx");

                    b.HasIndex("FkWarrantiesId")
                        .HasName("warranties_inventory_items_idx");

                    b.HasIndex("Vin")
                        .HasName("idxvin");

                    b.ToTable("inventory_items");
                });

            modelBuilder.Entity("Ecommerce.Models.Entities.Makes", b =>
                {
                    b.Property<int>("MakesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("makes_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("MakeName")
                        .IsRequired()
                        .HasColumnName("make_name")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("MakesId");

                    b.HasIndex("MakeName")
                        .HasName("idxmakename");

                    b.ToTable("makes");
                });

            modelBuilder.Entity("Ecommerce.Models.Entities.Models", b =>
                {
                    b.Property<int>("ModelsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("models_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkCategoriesId")
                        .HasColumnName("fk_categories_id")
                        .HasColumnType("int(11)");

                    b.Property<int?>("fk_categories_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkMakesId")
                        .HasColumnName("fk_makes_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnName("model_name")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("ModelsId");

                    b.HasIndex("fk_categories_id");

                    b.HasIndex("FkMakesId")
                        .HasName("makes_models_idx");

                    b.HasIndex("ModelName")
                        .HasName("idxmodelname");

                    b.ToTable("models");
                });

            modelBuilder.Entity("Ecommerce.Models.Entities.OrderDetails", b =>
                {
                    b.Property<int>("OrderDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("order_details_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkOrdersId")
                        .HasColumnName("fk_orders_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkProductsId")
                        .HasColumnName("fk_products_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkInventoryItemsId")
                        .HasColumnName("fk_inventory_items_id")
                        .HasColumnType("int(11)");

                    b.Property<decimal>("ItemPrice")
                        .HasColumnName("item_price")
                        .HasColumnType("decimal(19,2)");

                    b.Property<DateTime?>("ShipDate")
                       .HasColumnName("ship_date")
                       .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasColumnName("notes")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("int(11)");

                    b.Property<decimal?>("Tax")
                        .HasColumnName("tax")
                        .HasColumnType("decimal(19,2)");

                    b.HasKey("OrderDetailsId");

                    b.HasIndex("FkOrdersId")
                        .HasName("order_details_orders_idx");

                    b.HasIndex("FkProductsId")
                        .HasName("order_details_products_idx");

                    b.HasIndex("FkInventoryItemsId")
                        .HasName("order_details_inventory_items_idx");

                    b.ToTable("order_details");
                });

            modelBuilder.Entity("Ecommerce.Models.Entities.Orders", b =>
                {
                    b.Property<int>("OrdersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("orders_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkCustomersId")
                        .HasColumnName("fk_customers_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Notes")
                        .HasColumnName("notes")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("InvoiceUrl")
                        .HasColumnName("invoice_url")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnName("order_date")
                        .HasColumnType("datetime");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number")
                        .HasColumnType("int(11)");

                    b.Property<decimal?>("Subtotal")
                        .HasColumnName("subtotal")
                        .HasColumnType("decimal(19,2)");

                    b.Property<decimal?>("Tax")
                        .HasColumnName("tax")
                        .HasColumnType("decimal(19,2)");

                    b.Property<decimal?>("Total")
                        .HasColumnName("total")
                        .HasColumnType("decimal(19,2)");

                    b.HasKey("OrdersId");

                    b.HasIndex("FkCustomersId")
                        .HasName("orders_customers_idx");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("Ecommerce.Models.Entities.Products", b =>
                {
                    b.Property<int>("ProductsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("products_id")
                        .HasColumnType("int(11)");

                    b.Property<int?>("BaseWeight")
                        .HasColumnName("base_weight")
                        .HasColumnType("int(11)");

                    b.Property<decimal?>("Cost")
                        .HasColumnName("cost")
                        .HasColumnType("decimal(19,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<int?>("FkBodyStylesId")
                        .HasColumnName("fk_body_styles_id")
                        .HasColumnType("int(11)");

                    b.Property<int?>("FkCategoriesId")
                        .HasColumnName("fk_categories_id")
                        .HasColumnType("int(11)");

                    b.Property<int?>("FkDriveTrainsId")
                        .HasColumnName("fk_drive_trains_id")
                        .HasColumnType("int(11)");

                    b.Property<int?>("FkEngineTypesId")
                        .HasColumnName("fk_engine_types_id")
                        .HasColumnType("int(11)");

                    b.Property<int?>("FkEpaClassesId")
                        .HasColumnName("fk_epa_classes_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkMakesId")
                        .HasColumnName("fk_makes_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkModelsId")
                        .HasColumnName("fk_models_id")
                        .HasColumnType("int(11)");

                    b.Property<int?>("FkTransmissionsId")
                        .HasColumnName("fk_transmissions_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("GasMileage")
                        .HasColumnName("gas_mileage")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<int?>("Horsepower")
                        .HasColumnName("horsepower")
                        .HasColumnType("int(11)");

                    b.Property<ulong?>("IsFeatured")
                        .HasColumnName("is_featured")
                        .HasColumnType("bit(1)");

                    b.Property<string>("LongDescription")
                        .HasColumnName("long_description")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<decimal?>("Msrp")
                        .HasColumnName("msrp")
                        .HasColumnType("decimal(19,2)");

                    b.Property<int?>("PassengerDoors")
                        .HasColumnName("passenger_doors")
                        .HasColumnType("int(11)");

                    b.Property<int?>("Passengers")
                        .HasColumnName("passengers")
                        .HasColumnType("int(11)");

                    b.Property<int?>("QuantityInStock")
                        .HasColumnName("quantity_in_stock")
                        .HasColumnType("int(11)");

                    b.Property<decimal?>("SalesPrice")
                        .HasColumnName("sales_price")
                        .HasColumnType("decimal(19,2)");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnName("sku")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("Trim")
                        .HasColumnName("trim")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("Upc")
                        .HasColumnName("upc")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<int>("Year")
                        .HasColumnName("year")
                        .HasColumnType("int(11)");

                    b.HasKey("ProductsId");

                    b.HasIndex("Description")
                        .HasName("idxdescription");

                    b.HasIndex("FkBodyStylesId")
                        .HasName("body_styles_products_idx");

                    b.HasIndex("FkCategoriesId")
                        .HasName("product_categories_idx");

                    b.HasIndex("FkDriveTrainsId")
                        .HasName("drive_trains_products_idx");

                    b.HasIndex("FkEngineTypesId")
                        .HasName("engine_types_products_idx");

                    b.HasIndex("FkEpaClassesId")
                        .HasName("epa_classes_products_idx");

                    b.HasIndex("FkMakesId")
                        .HasName("makes_products_idx");

                    b.HasIndex("FkModelsId")
                        .HasName("models_products_idx");

                    b.HasIndex("FkTransmissionsId")
                        .HasName("transmissions_products_idx");

                    b.HasIndex("Sku")
                        .HasName("idxsku");

                    b.HasIndex("Upc")
                        .HasName("idxupc");

                    b.ToTable("products");
                });

            modelBuilder.Entity("Ecommerce.Models.Entities.ShoppingCartRecords", b =>
                {
                    b.Property<int>("ShoppingCartRecordsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("shopping_cart_records_id")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("date_created")
                        .HasColumnType("datetime");

                    b.Property<int>("FkCustomersId")
                        .HasColumnName("fk_customers_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkProductsId")
                        .HasColumnName("fk_products_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("int(11)");

                    b.HasKey("ShoppingCartRecordsId");

                    b.HasIndex("FkCustomersId")
                        .HasName("shopping_customers_idx");

                    b.HasIndex("FkProductsId")
                        .HasName("shopping_products_idx");

                    b.ToTable("shopping_cart_records");
                });

            modelBuilder.Entity("Ecommerce.Models.Entities.Transmissions", b =>
                {
                    b.Property<int>("TransmissionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("transmissions_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("TransmissionName")
                        .IsRequired()
                        .HasColumnName("transmission_name")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("TransmissionsId");

                    b.HasIndex("TransmissionName")
                        .HasName("idxtransname");

                    b.ToTable("transmissions");
                });

            modelBuilder.Entity("Ecommerce.Models.Entities.Warranties", b =>
                {
                    b.Property<int>("WarrantiesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("warranties_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("WarrantyName")
                        .IsRequired()
                        .HasColumnName("warranty_name")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("WarrantiesId");

                    b.HasIndex("WarrantyName")
                        .HasName("idxwarrantyname");

                    b.ToTable("warranties");
                });

            modelBuilder.Entity("Ecommerce.Models.Entities.CategoryPictures", b =>
                {
                    b.HasOne("Ecommerce.Models.Entities.Categories", "FkCategories")
                        .WithMany("CategoryPictures")
                        .HasForeignKey("FkCategoriesId")
                        .HasConstraintName("category_pictures_categories")
                        .IsRequired();
                });

            modelBuilder.Entity("Ecommerce.Models.Entities.Colors", b =>
                {
                    b.HasOne("Ecommerce.Models.Entities.Makes", "FkMakes")
                        .WithMany("Colors")
                        .HasForeignKey("FkMakesId")
                        .HasConstraintName("colors_makes");
                });

            modelBuilder.Entity("Ecommerce.Models.Entities.InventoryItemPictures", b =>
                {
                    b.HasOne("Ecommerce.Models.Entities.InventoryItems", "FkInventoryItems")
                        .WithMany("InventoryItemPictures")
                        .HasForeignKey("FkInventoryItemsId")
                        .HasConstraintName("inventory_items_inv_itmpic")
                        .IsRequired();
                });

            modelBuilder.Entity("Ecommerce.Models.Entities.InventoryItems", b =>
                {
                    b.HasOne("Ecommerce.Models.Entities.Colors", "FkColors")
                        .WithMany("InventoryItems")
                        .HasForeignKey("FkColorsId")
                        .HasConstraintName("colors_inventory_Items");

                    b.HasOne("Ecommerce.Models.Entities.Products", "FkProducts")
                        .WithMany("InventoryItems")
                        .HasForeignKey("FkProductsId")
                        .HasConstraintName("products_inventory_items")
                        .IsRequired();

                    b.HasOne("Ecommerce.Models.Entities.Warranties", "FkWarranties")
                        .WithMany("InventoryItems")
                        .HasForeignKey("FkWarrantiesId")
                        .HasConstraintName("warranties_inventory_items");
                });

            modelBuilder.Entity("Ecommerce.Models.Entities.Models", b =>
                {
                    b.HasOne("Ecommerce.Models.Entities.Categories", "FkCategories")
                        .WithMany("Models")
                        .HasForeignKey("fk_categories_id");

                    b.HasOne("Ecommerce.Models.Entities.Makes", "FkMakes")
                        .WithMany("Models")
                        .HasForeignKey("FkMakesId")
                        .HasConstraintName("makes_models")
                        .IsRequired();
                });

            modelBuilder.Entity("Ecommerce.Models.Entities.OrderDetails", b =>
                {
                    b.HasOne("Ecommerce.Models.Entities.Orders", "FkOrders")
                        .WithMany("OrderDetails")
                        .HasForeignKey("FkOrdersId")
                        .HasConstraintName("order_details_orders")
                        .IsRequired();

                    b.HasOne("Ecommerce.Models.Entities.Products", "FkProducts")
                        .WithMany("OrderDetails")
                        .HasForeignKey("FkProductsId")
                        .HasConstraintName("order_details_products")
                        .IsRequired();
                });

            modelBuilder.Entity("Ecommerce.Models.Entities.Orders", b =>
                {
                    b.HasOne("Ecommerce.Models.Entities.Customers", "FkCustomers")
                        .WithMany("Orders")
                        .HasForeignKey("FkCustomersId")
                        .HasConstraintName("orders_customers")
                        .IsRequired();
                });

            modelBuilder.Entity("Ecommerce.Models.Entities.Products", b =>
                {
                    b.HasOne("Ecommerce.Models.Entities.BodyStyles", "FkBodyStyles")
                        .WithMany("Products")
                        .HasForeignKey("FkBodyStylesId")
                        .HasConstraintName("body_styles_products");

                    b.HasOne("Ecommerce.Models.Entities.Categories", "FkCategories")
                        .WithMany("Products")
                        .HasForeignKey("FkCategoriesId")
                        .HasConstraintName("product_categories");

                    b.HasOne("Ecommerce.Models.Entities.DriveTrains", "FkDriveTrains")
                        .WithMany("Products")
                        .HasForeignKey("FkDriveTrainsId")
                        .HasConstraintName("drive_trains_products");

                    b.HasOne("Ecommerce.Models.Entities.EngineTypes", "FkEngineTypes")
                        .WithMany("Products")
                        .HasForeignKey("FkEngineTypesId")
                        .HasConstraintName("engine_types_products");

                    b.HasOne("Ecommerce.Models.Entities.EpaClasses", "FkEpaClasses")
                        .WithMany("Products")
                        .HasForeignKey("FkEpaClassesId")
                        .HasConstraintName("epa_classes_products");

                    b.HasOne("Ecommerce.Models.Entities.Makes", "FkMakes")
                        .WithMany("Products")
                        .HasForeignKey("FkMakesId")
                        .HasConstraintName("makes_products")
                        .IsRequired();

                    b.HasOne("Ecommerce.Models.Entities.Models", "FkModels")
                        .WithMany("Products")
                        .HasForeignKey("FkModelsId")
                        .HasConstraintName("models_products")
                        .IsRequired();

                    b.HasOne("Ecommerce.Models.Entities.Transmissions", "FkTransmissions")
                        .WithMany("Products")
                        .HasForeignKey("FkTransmissionsId")
                        .HasConstraintName("transmissions_products");
                });

            modelBuilder.Entity("Ecommerce.Models.Entities.ShoppingCartRecords", b =>
                {
                    b.HasOne("Ecommerce.Models.Entities.Customers", "FkCustomers")
                        .WithMany("ShoppingCartRecords")
                        .HasForeignKey("FkCustomersId")
                        .HasConstraintName("shopping_customers")
                        .IsRequired();

                    b.HasOne("Ecommerce.Models.Entities.Products", "FkProducts")
                        .WithMany("ShoppingCartRecords")
                        .HasForeignKey("FkProductsId")
                        .HasConstraintName("shopping_products")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
