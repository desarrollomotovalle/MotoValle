@model motovalle.Ecommerce.Models.ViewModels.Checkout.FundingRequest.CheckoutFundingRequestSantaderBankViewModel

@{
    ViewData["Title"] = "Funding Request Santader Bank";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<section class="b-pageHeader checkout">
    <div class="container">
        <h1 class=" wow zoomInLeft" data-wow-delay="0.5s">Compras</h1>
        <div class="b-pageHeader__search wow zoomInRight" data-wow-delay="0.5s">
            <h3>Bolsa de compras</h3>
        </div>
    </div>
</section><!--b-pageHeader-->

<div class="b-breadCumbs s-shadow">
    <div class="container wow zoomInUp" data-wow-delay="0.5s">
        <a asp-action="Index" asp-controller="Home" class="b-breadCumbs__page">Home</a>
        <span class="fa fa-angle-right"></span><a asp-action="Index" asp-controller="ShoppigCart" class="b-breadCumbs__page m-active">Compras</a>
        <span class="fa fa-angle-right"></span><a asp-action="Checkout" asp-controller="ShoppigCart" class="b-breadCumbs__page m-active">Información de compra</a>
    </div>
    @if (ViewBag.Message != null)
    {
        <div class="alert alert-danger text-center wow zoomInUp" role="alert" data-wow-delay="0.5s">
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
            <strong>¡Ups!..</strong> @ViewBag.Message &#128577;
        </div>
    }
</div><!--b-breadCumbs-->

<div class="b-submit">
    <div class="container">
        <div class="row">
            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12" style="padding: 1rem; border: 1px solid rgb(238, 238, 238); margin: 0rem 0 2rem 0;">
                @await Component.InvokeAsync("ShoppingCartSummaryCheckout")
            </div>
            <div class="col-lg-3 col-md-4 col-sm-5 col-xs-6">
                @{ await Html.RenderPartialAsync("~/Views/Shared/ShoppingCart/_ShoppingCartStepsPartial.cshtml", 4); }
            </div>
            <div class="col-lg-9 col-md-8 col-sm-7 col-xs-6">
                <div class="b-submit__main">
                    <div class="pull-left fadeInRight">
                        <header class="s-headerSubmit s-lineDownLeft wow zoomInUp" data-wow-delay="0.2s">
                            <h2>Solicitud de crédito</h2>
                        </header>
                        <p class="h5">Diligencia formulario de solicitud</p>
                    </div>
                    <div class="pull-right fadeInRight">
                        <img src="~/images/brand_logos/santander_logo_blanco.jpg" class="img-fluid" alt="Logo Banco Santander" style="max-height: 180px;" />
                    </div>
                    <form class="s-submit clearfix wow zoomInUp" data-wow-delay="0.2s" asp-action="FundingRequestSantaderBank" asp-controller="ShoppingCart" method="POST" id="frmFundingRequestSantanderBank">
                        <!--Step 2 Info-->
                        <div>
                            <input asp-for="CheckoutData.CustomerData.Email" type="hidden" />
                            <input asp-for="CheckoutData.CustomerData.FristName" type="hidden" />
                            <input asp-for="CheckoutData.CustomerData.LastName" type="hidden" />
                            <input asp-for="CheckoutData.CustomerData.IDType" type="hidden" />
                            <input asp-for="CheckoutData.CustomerData.IDNumber" type="hidden" />
                            <input asp-for="CheckoutData.CustomerData.PhoneNumber" type="hidden" />
                            <input asp-for="CheckoutData.CustomerData.AlternateNumber" type="hidden" />
                            <input asp-for="CheckoutData.CustomerData.CompanyName" type="hidden" />
                        </div>
                        <!--Step 3 Info-->
                        <div>
                            <input asp-for="CheckoutData.CustomerData.AddressesData.Country" type="hidden" />
                            <input asp-for="CheckoutData.CustomerData.AddressesData.State" type="hidden" />
                            <input asp-for="CheckoutData.CustomerData.AddressesData.City" type="hidden" />
                            <input asp-for="CheckoutData.CustomerData.AddressesData.Address" type="hidden" />
                            <input asp-for="CheckoutData.CustomerData.AddressesData.ZipCode" type="hidden" />
                            <input asp-for="CheckoutData.CustomerData.AddressesData.BillState" type="hidden" />
                            <input asp-for="CheckoutData.CustomerData.AddressesData.BillCity" type="hidden" />
                            <input asp-for="CheckoutData.CustomerData.AddressesData.BillAddress" type="hidden" />
                            <input asp-for="CheckoutData.CustomerData.AddressesData.BillZipCode" type="hidden" />
                        </div>
                        <!--Step 4 Info-->
                        <div>
                            <input asp-for="CheckoutData.PaymentWayData.PaymentWayOption" type="hidden" />
                            <input asp-for="CheckoutData.PaymentWayData.GatewayPayment" type="hidden" />
                            <input asp-for="CheckoutData.PaymentWayData.FundingRequestInstitution" type="hidden" />
                            <input asp-for="CheckoutData.PaymentWayData.PartialAmount" type="hidden" />
                            <input asp-for="CheckoutData.PaymentWayData.TotalAmount" type="hidden" />
                        </div>

                        <div class="row fadeIn">
                            <div class="col-sm-12">
                                <div class="panel panel-default">
                                    <div class="panel-heading">
                                        <h4 class="panel-title">
                                            Solicitud de crédito
                                        </h4>
                                    </div>
                                    <div class="panel-body">
                                        <!--Basic Data -->
                                        <div class="row">
                                            <input type="hidden" asp-for="SantanderBankCreditOnline.DocType" />
                                            <input type="hidden" asp-for="SantanderBankCreditOnline.DocNumber" />
                                            <div class="col-sm-12">
                                                <header class="s-headerSubmit s-lineDownLeft" style="margin: 2rem 0; padding: 0">
                                                    <h4>Informacíón Específica</h4>
                                                </header>
                                            </div>
                                            <div class="col-md-12 col-xs-12">
                                                <div class="b-submit__main-element">
                                                    <label>@Html.DisplayNameFor(x => x.SantanderBankCreditOnline.ActividadEconomica) <span>*</span></label>
                                                    <div class='s-relative'>
                                                        @Html.DropDownListFor(x => x.SantanderBankCreditOnline.ActividadEconomica, Html.GetEnumSelectList<SantanderBankEconomicActivity>(), new { @class = "m-select" })
                                                        <span class="fa fa-caret-down"></span>
                                                        <span asp-validation-for="SantanderBankCreditOnline.ActividadEconomica" class="text-danger"></span>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-6 col-xs-12">
                                                <div class="b-submit__main-element">
                                                    <label>@Html.DisplayNameFor(x => x.SantanderBankCreditOnline.ActividadIndependiente) <span>*</span></label>
                                                    <div class='s-relative'>
                                                        @Html.DropDownListFor(x => x.SantanderBankCreditOnline.ActividadIndependiente, Html.GetEnumSelectList<SantanderBankIndependentActivity>(), new { @class = "m-select" })
                                                        <span class="fa fa-caret-down"></span>
                                                        <span asp-validation-for="SantanderBankCreditOnline.ActividadIndependiente" class="text-danger"></span>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-6 col-xs-12">
                                                <div class="b-submit__main-element">
                                                    <label>@Html.DisplayNameFor(x => x.SantanderBankCreditOnline.MonthlyIncome) <span>*</span></label>
                                                    <div class='s-relative'>
                                                        <input asp-for="SantanderBankCreditOnline.MonthlyIncome" type="hidden" />
                                                        <input type="text" onkeyup="getCurrencyFormatForNumber(this, event, 'SantanderBankCreditOnline_MonthlyIncome');" onblur="getCurrencyFormatForNumber(this, event, 'SantanderBankCreditOnline_MonthlyIncome');" required />
                                                        <span asp-validation-for="SantanderBankCreditOnline.MonthlyIncome" class="text-danger"></span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <!-- Specific Data -->
                                        <div class="row">
                                            <div class="col-sm-12">
                                                <header class="s-headerSubmit s-lineDownLeft" style="margin: 2rem 0; padding: 0">
                                                    <h4>Datos del Crédito</h4>
                                                </header>
                                            </div>
                                            <div class="col-md-6 col-xs-12">
                                                <input asp-for="SantanderBankCreditOnline.TotalAmount" type="hidden" value="@Model.CheckoutData.PaymentWayData.TotalAmount" />
                                                <div class="b-submit__main-element">
                                                    <label>@Html.DisplayNameFor(x => x.SantanderBankCreditOnline.InitialFee)<span>*</span> (Debe ser mínimo el 10% del Total)</label>
                                                    <div class='s-relative'>
                                                        <input asp-for="SantanderBankCreditOnline.InitialFee" type="hidden" value="@((Model.CheckoutData.PaymentWayData.TotalAmount / 100) * 10)" min="@((Model.CheckoutData.PaymentWayData.TotalAmount / 100) * 10)" />
                                                        <input class="currency-mask custom" type="text" data-main="SantanderBankCreditOnline_InitialFee" value="@((Model.CheckoutData.PaymentWayData.TotalAmount / 100) * 10)" data-min-amount="@((Model.CheckoutData.PaymentWayData.TotalAmount / 100) * 10)" data-max-amount="@Model.CheckoutData.PaymentWayData.TotalAmount" />
                                                        <span asp-validation-for="SantanderBankCreditOnline.InitialFee" class="text-danger"></span>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-6 col-xs-12">
                                                <div class="b-submit__main-element">
                                                    <label>@Html.DisplayNameFor(x => x.SantanderBankCreditOnline.Installments) <span>*</span></label>
                                                    <div class='s-relative'>
                                                        @Html.DropDownListFor(x => x.SantanderBankCreditOnline.Installments, Html.GetEnumSelectList<SantanderBankInstallments>(), new { @class = "m-select" })
                                                        <span class="fa fa-caret-down"></span>
                                                        <span asp-validation-for="SantanderBankCreditOnline.Installments" class="text-danger"></span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <!-- Base Form -->
                                        <div class="row">
                                            <div class="col-sm-12">
                                                <div class="b-submit__main-element">
                                                    <label><input type="checkbox" asp-for="HabeasData" required style="width: 18px; height: 18px; visibility:visible; position: relative;" /> Acepto las <a href="~/files/POLITICA DATOS PERSONALES MOTOVALLE[2336].pdf" rel="noreferrer" target="_blank" class="p-0 m-0">políticas de privacidad</a></label>
                                                    <span asp-validation-for="HabeasData"></span>
                                                </div>
                                            </div>
                                            <div class="col-xs-offset-1 col-sm-offset-1 col-md-offset-1 col-lg-offset-1">
                                                @{ await Html.RenderPartialAsync("_Recaptcha"); }
                                            </div>
                                        </div>
                                    </div>
                                    <div class="panel-footer">
                                        <div class="text-center">
                                            <button type="submit" class="btn m-btn btn-block wow zoomInUp" style="margin:0; padding: 1rem 0;">Realizar solicitud y Finaliza compra <span class="fa fa-angle-right"></span></button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div><!--b-submit-->

@section Scripts{
    <partial name="_ValidationScriptsPartial" />
    <script src="https://brainfoolong.github.io/form-data-json/lib/form-data-json.min.js"></script>
    <script type="text/javascript">
        (() => {
            const $bSubmit = document.querySelector(".b-submit");
            const $frmFundingRequestSantanderBank = document.querySelector("#frmFundingRequestSantanderBank");
            InitializeFundingRequestForm();

            setTimeout(() => {
                const offsetTop = $bSubmit.offsetTop;
                scroll({
                    top: offsetTop,
                    behavior: "smooth"
                });
            }, 530);

            /**Listeners */
            $frmFundingRequestSantanderBank.addEventListener('submit', async (e) => {
                e.preventDefault();

                ////Validate Stock
                const result = await ValidateStock();
                if (!result) {
                    return;
                }

                ////Check Monthly Income
                const $monthlyIncome = document.querySelector("#SantanderBankCreditOnline_MonthlyIncome");
                if ($monthlyIncome.value <= 1) {
                    await Swal.fire({
                        icon: 'error',
                        title: 'Ingreso Mensual',
                        html: 'Verifica el valor ingresado',
                        footer: '<b>Por favor intenta nuevamente.</b>',
                        allowOutsideClick: false,
                        allowEscapeKey: false
                    });

                    return;
                }

                ////Validate no robot
                const gResponse = grecaptcha.getResponse();
                if (!gResponse) {
                    await Swal.fire({
                        icon: 'error',
                        title: 'reCaptcha',
                        html: 'Verifica el Captcha',
                        footer: '<b>Por favor intenta nuevamente.</b>',
                        allowOutsideClick: false,
                        allowEscapeKey: false
                    });

                    return;
                }

                if (!$(e.target).valid()) {
                    return;
                }

                ////Question
                const areYouSure = await Swal.fire({
                    title: '¿Estás completamente seguro de continuar?',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: '¡Sí!',
                    allowOutsideClick: false,
                    allowEscapeKey: false
                });

                ////Continue
                if (areYouSure.isConfirmed) {
                    ////Call Santander API
                    Swal.fire({
                        title: 'Consultando con Banco Santander...',
                        html: '¡Me cerraré en pocos segundos!',
                        allowOutsideClick: false,
                        allowEscapeKey: false,
                        onBeforeOpen: () => {
                            Swal.showLoading()
                        }
                    });

                    const santanderBankRequest = await fetch(e.target.getAttribute('action'), {
                        method: "POST",
                        body: new FormData(e.target)
                    });

                    if (santanderBankRequest.ok) {
                        const response = await santanderBankRequest.json();
                        switch (response.ControlStatus) {
                            case "ModelError":
                                const errorMessage = subsciptionResponse.Errors.reduce((acc, el) => { return acc + `- ${el.ErrorMessage}<br/>` });
                                await Swal.fire({
                                    icon: 'warning',
                                    title: 'Verifica los siguientes campos:',
                                    text: errorMessage,
                                    footer: '<b>Te esperamos.</b>',
                                    allowOutsideClick: false,
                                    allowEscapeKey: false
                                });

                                break;
                            case "Error":
                                await Swal.fire({
                                    icon: 'error',
                                    title: '¡Ups!. Ha ocurrido un error',
                                    html: response.Message,
                                    footer: '<b>Por favor intenta nuevamente.</b>',
                                    allowOutsideClick: false,
                                    allowEscapeKey: false
                                });

                                break;
                            case "Info":
                                await Swal.fire({
                                    icon: 'info',
                                    title: 'Información',
                                    html: response.Message,
                                    allowOutsideClick: false,
                                    allowEscapeKey: false
                                });

                                break;
                            case "FundingRequestOk":
                                const formatter = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' });
                                const tableHtml = `<p class='h4'><b>Banco Santander</b> dice: ${response.Message}</p>
                                                               <table style="font-size: 16px;" class='table table-striped table-bordered' border="0">
                                                                    <tbody>
                                                                    <tr style="height: 21px;">
                                                                        <td style="height: 21px; width: 127px;" class='table-active'>Monto Solicitado:</td>
                                                                        <td style="height: 21px; width: 155px;">${formatter.format(response.Response.MontoSol)}</td>
                                                                    </tr>
                                                                    <tr style="height: 21px;">
                                                                        <td style="height: 21px; width: 127px;" class='table-active'>Plazo:</td>
                                                                        <td style="height: 21px; width: 155px;">${response.Response.Request.Plazo}</td>
                                                                    </tr>
                                                                    <tr style="height: 21px;">
                                                                        <td style="height: 21px; width: 127px;" class='table-active'>Tasa:</td>
                                                                        <td style="height: 21px; width: 155px;">${response.Response.Request.Tasa}</td>
                                                                    </tr>
                                                                    <tr style="height: 21px;">
                                                                        <td style="height: 21px; width: 127px;" class='table-active'>Cuota Proyectada:</td>
                                                                        <td style="height: 21px; width: 155px;">${formatter.format(response.Response.CuotaProyectada)}</td>
                                                                    </tr>
                                                                    </tbody>
                                                               </table>`;

                                //Continue again?
                                const letsContinue = await Swal.fire({
                                    title: 'Solicitud de crédito exitosa',
                                    icon: 'success',
                                    html: tableHtml,
                                    showCancelButton: true,
                                    confirmButtonColor: '#3085d6',
                                    cancelButtonColor: '#d33',
                                    confirmButtonText: 'Continuar con la compra',
                                    cancelButtonText: 'No, cancelar',
                                    footer: "Verifica la información del crédito"
                                });

                                if (!letsContinue.isConfirmed) {
                                    grecaptcha.reset();
                                    return false;
                                };

                                ////Call Order Api
                                Swal.fire({
                                    title: 'Generando compra...',
                                    html: '¡Me cerraré en pocos segundos!',
                                    allowOutsideClick: false,
                                    allowEscapeKey: false,
                                    onBeforeOpen: () => {
                                        Swal.showLoading()
                                    }
                                });

                                const orderRequest = await fetch(`/ShoppingCart/FundingRequestSantaderBankCreateOrder?santanderResponse=${encodeURIComponent(btoa(JSON.stringify(response)))}`, {
                                    method: "POST",
                                    body: new FormData(e.target)
                                });

                                if (orderRequest.ok) {
                                    const orderResult = await orderRequest.json();
                                    if (orderResult.ControlStatus == "FundingRequestOk") {
                                        await Swal.fire({
                                            icon: "success",
                                            title: "¡Gracias!",
                                            text: "Estámos finalizando tu compra.",
                                            footer: "Espera unos segundos",
                                            timerProgressBar: true,
                                            showClass: {
                                                popup: 'animated rubberBand'
                                            },
                                            hideClass: {
                                                popup: 'animated fadeOutUp faster'
                                            },
                                            position: 'top-center',
                                            timer: 5000,
                                            showConfirmButton: false,
                                            allowOutsideClick: false,
                                            allowEscapeKey: false
                                        });

                                        ////Start Order process
                                        Swal.fire({
                                            title: 'Generando orden de compra...',
                                            html: '¡Me cerraré en pocos segundos!',
                                            onBeforeOpen: () => {
                                                Swal.showLoading()
                                            },
                                            allowOutsideClick: false,
                                            allowEscapeKey: false
                                        });

                                        ///Get Manual Invoice call
                                        const url = `/Orders/GetManualInvoicePDF/${orderResult.OrderId}/Emails/${true}`;
                                        const orderPdfRequest = await fetch(url, {
                                            method: "GET",
                                            headers: {
                                                "Accept": "application/json",
                                                "Content-Type": "application/json"
                                            }
                                        });

                                        if (orderPdfRequest.ok) {
                                            await Swal.fire({
                                                title: 'Orden creada exitosamente',
                                                text: "Se ha enviado la orden a tu Email",
                                                footer: "Redirigiendo al detalle de la orden. Espera unos segundos.",
                                                showClass: {
                                                    popup: 'animated fadeInUp faster'
                                                },
                                                hideClass: {
                                                    popup: 'animated fadeOutRight faster'
                                                },
                                                position: 'top-end',
                                                icon: 'success',
                                                showConfirmButton: false,
                                                timerProgressBar: true,
                                                timer: 5000,
                                                allowOutsideClick: false,
                                                allowEscapeKey: false
                                            });

                                            location.href = `/Orders/Details/${orderResult.OrderId}`;
                                        } else {
                                            await Swal.fire({
                                                icon: 'error',
                                                title: '¡Ups!',
                                                text: 'Error al crear la orden',
                                                footer: '<b><a href="/Info/ContactUs">Por favor infórmanos</a></b>',
                                                allowOutsideClick: false,
                                                allowEscapeKey: false
                                            });
                                        }
                                    } else {
                                        await Swal.fire({
                                            icon: 'error',
                                            title: '¡Ups!',
                                            text: 'Error al crear la orden',
                                            footer: '<b><a href="/Info/ContactUs">Por favor infórmanos</a></b>',
                                            allowOutsideClick: false,
                                            allowEscapeKey: false
                                        });
                                    }
                                }
                        }
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Servidor no disponible',
                            text: 'Lo sentimos, intentan más tarde.',
                            footer: '<b><a href="/Info/ContactUs">Por favor infórmanos</a></b>',
                            allowOutsideClick: false,
                            allowEscapeKey: false
                        });
                    }
                }
            });

            /**Set Initial Amounts */
            function InitializeFundingRequestForm() {
                document.querySelector("#SantanderBankCreditOnline_DocType").value = document.querySelector("#CheckoutData_CustomerData_IDType").value;
                document.querySelector("#SantanderBankCreditOnline_DocNumber").value = document.querySelector("#CheckoutData_CustomerData_IDNumber").value;
            }
        })();
    </script>
}